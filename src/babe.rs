//! BABE consensus.
//!
//! BABE, or Blind Assignment for Blockchain Extension, is the consensus algorithm used by
//! Polkadot in order to determine who is authorized to generate a block.
//!
//! Every block (with the exception of the genesis block) must contain, in its header, some data
//! that makes it possible to verify that it has been generated by a legitimate author.
//!
//! References:
//!
//! - https://research.web3.foundation/en/latest/polkadot/BABE/Babe.html
//!
//! # Overview of BABE
//!
//! In the BABE algorithm, time is divided into non-overlapping **epochs**, themselves divided
//! into **slots**. How long an epoch and a slot are is determined by calling the
//! `BabeApi_configuration` runtime entry point.
//!
//! > **Note**: As example values, in the Polkadot genesis, a slot lasts for 6 seconds and an
//! >           epoch consists of 2400 slots (in other words, four hours).
//!
//! Every block that is produced must belong to a specific slot. This slot number can be found in
//! the block header, with the exception of the genesis block which is considered timeless and
//! doesn't have any slot number.
//!
//! At the moment, the current slot number is determined purely based on the slot duration (e.g.
//! 6 seconds for Polkadot) and the local clock based on the UNIX EPOCH. The current slot
//! number is `unix_timestamp / duration_per_slot`. This might change in the future.
//!
//! The first epoch starts at `slot_number(block #1)` and ends at
//! `slot_number(block #1) + slots_per_epoch`. The second epoch starts at slot
//! `end_of_epoch_1 + 1`. All epochs end at `start_of_new_epoch + slots_per_epoch`. Block #0
//! doesn't belong to any epoch.
//!
//! The header of first block produced after a transition to a new epoch (including block #1) must
//! contain a log entry indicating the public keys that are allowed to sign blocks, alongside with
//! a weight for each of them, and a "randomness value". This information does not concern the
//! newly-started epoch, but the one immediately after. In other words, the first block of epoch
//! `N` contains the information about epoch `N+1`.
//!
//! > **Note**: The way the list of authorities and their weights is determined is at the
//! >           discretion of the runtime code and is out of scope of this module, but it normally
//! >           corresponds to the list of validators and how much stake is available to them.
//!
//! In order to produce a block, one must generate, using a
//! [VRF (Verifiable Random Function)](https://en.wikipedia.org/wiki/Verifiable_random_function),
//! and based on the slot number, genesis hash, and aformentioned "randomness value",
//! a number whose value is lower than a certain threshold.
//!
//! The number that has been generated must be included in the header of the authored block,
//! alongside with the proof of the correct generation that can be verified using one of the
//! public keys allowed to generate blocks in that epoch. The weight associated to that public key
//! determines the allowed threshold.
//!
//! The "randomess value" of an epoch `N` is calculated by combining the generated numbers of all
//! the blocks of the epoch `N - 2`.
//!
//! ## Secondary slots
//!
//! While all slots can be claimed by generating a number below a certain threshold, each slot is
//! additionally assigned to a specific public key amongst the ones allowed. The owner of a
//! public key is always allowed to generate a block during the slot assigned to it.
//!
//! The mechanism of attributing each slot to a public key is called "secondary slots", while the
//! mechanism of generating a number below a certain threshold is called "primary slots". As their
//! name indicates, primary slots have a higher priority over secondary slots.
//!
//! Secondary slots are a way to guarantee that all slots can potentially lead to a block being
//! produced.
//!
//! ## Chain selection
//!
//! The "best" block of a chain in the BABE algorithm is the one with the highest slot number.
//! If there exists multiple blocks on the same slot, the best block is one with the highest number
//! of primary slots claimed. In other words, if two blocks have the same parent, but one is a
//! primary slot claim and the other is a secondary slot claim, we prefer the one with the primary
//! slot claim.
//!
//! Keep in mind that there can still be draws in terms of primary slot claims count, in which
//! case the winning block is the one upon which the next block author builds upon.
//!
//! ## Epochs 0 and 1
//!
//! The information about an epoch `N` is provided by the first block of the epoch `N-1`.
//!
//! Because of this, we need to special-case epochs 0 and 1. The information about these two
//! epochs in particular is contained in the chain-wide BABE configuration found in the runtime.
//!
//! # Usage
//!
//! Verifying a BABE block is done in two phases:
//!
//! - First, call [`start_verify_header`] to start the verification process. This returns a
//! [`SuccessOrPending`] enum.
//! - If [`SuccessOrPending::Pending`] has been returned, you need to provide a specific
//! [`EpochInformation`] struct.
//!

use crate::header;
use core::{convert::TryFrom as _, time::Duration};

mod definitions;
mod runtime;

pub mod chain_config;
pub mod header_info;

pub use chain_config::BabeGenesisConfiguration;
pub use header_info::{EpochInformation, EpochInformationAuthority};

/// Configuration for [`start_verify_header`].
pub struct VerifyConfig<'a> {
    /// Header of the block to verify.
    pub header: header::HeaderRef<'a>,

    /// Time elapsed since [the Unix Epoch](https://en.wikipedia.org/wiki/Unix_time) (i.e.
    /// 00:00:00 UTC on 1 January 1970), ignoring leap seconds.
    // TODO: unused, should check against a block's slot
    pub now_from_unix_epoch: Duration,

    /// Header of the parent of the block to verify.
    ///
    /// [`start_verify_header`] assumes that this block has been successfully verified before.
    ///
    /// The hash of this header must be the one referenced in [`VerifyConfig::header`].
    pub parent_block_header: header::HeaderRef<'a>,

    /// BABE configuration retrieved from the genesis block.
    ///
    /// Can be obtained by calling [`BabeGenesisConfiguration::from_virtual_machine_prototype`]
    /// with the runtime of the genesis block.
    pub genesis_configuration: &'a BabeGenesisConfiguration,

    /// Slot number of block #1. **Must** be provided, unless the block being verified is block
    /// #1 itself.
    pub block1_slot_number: Option<u64>,
}

/// Information yielded back after successfully verifying a block.
#[derive(Debug)]
pub struct VerifySuccess {
    /// If `Some`, the verified block contains an epoch transition. This epoch transition must
    /// later be provided back as part of the [`VerifyConfig`] of the blocks that are part of
    /// that epoch.
    pub epoch_change: Option<EpochChangeInformation>,

    /// Slot number the block belongs to.
    pub slot_number: u64,
}

/// Information about a change of epoch.
#[derive(Debug)]
pub struct EpochChangeInformation {
    /// Number of the new epoch that `info` described.
    ///
    /// > **Note**: This is **not** the epoch that we have just entered.
    pub info_epoch_number: u64,

    /// Information about the next epoch.
    ///
    /// > **Note**: This is **not** the epoch that we have just entered, but the next one.
    pub info: EpochInformation,
}

/// Failure to verify a block.
#[derive(Debug, derive_more::Display)]
pub enum VerifyError {
    /// Error while reading information from the header.
    BadHeader(header_info::Error),
    /// Slot number must be strictly increasing between a parent and its child.
    SlotNumberNotIncreasing,
    /// Block contains an epoch change digest log, but no epoch change is to be performed.
    UnexpectedEpochChangeLog,
    /// Block is the first block after a new epoch, but it is missing an epoch change digest log.
    MissingEpochChangeLog,
    /// Authority index stored within block is out of range.
    InvalidAuthorityIndex,
    /// Block header signature is invalid.
    BadSignature,
    /// VRF proof in the block header is invalid.
    BadVrfProof,
    /// Block is a secondary slot claim and its author is not the expected author.
    BadSecondarySlotAuthor,
}

/// Verifies whether a block header provides a correct proof of the legitimacy of the authorship.
///
/// Returns either a [`PendingVerify`] if more information is needed, or a [`VerifySuccess`] if
/// the verification could be successfully performed.
///
/// # Panic
///
/// Panics if `config.parent_block_header` is invalid.
/// Panics if `config.block1_slot_number` is `None` and `config.header.number` is not 1.
///
pub fn start_verify_header<'a>(
    config: VerifyConfig<'a>,
) -> Result<SuccessOrPending<'a>, VerifyError> {
    let header =
        header_info::header_information(config.header.clone()).map_err(VerifyError::BadHeader)?;

    // Gather the BABE-related information from the header.
    let (authority_index, slot_number, primary, vrf) = match header.pre_runtime {
        header_info::PreDigest::Primary(digest) => (
            digest.authority_index,
            digest.slot_number,
            true,
            Some((digest.vrf_output, digest.vrf_proof)),
        ),
        header_info::PreDigest::SecondaryPlain(digest) => {
            (digest.authority_index, digest.slot_number, false, None)
        }
        header_info::PreDigest::SecondaryVRF(digest) => (
            digest.authority_index,
            digest.slot_number,
            false,
            Some((digest.vrf_output, digest.vrf_proof)),
        ),
    };

    // Determine the epoch number of the block that we verify.
    let epoch_number = match (slot_number, config.block1_slot_number) {
        (curr, Some(block1)) => {
            slot_number_to_epoch(curr, config.genesis_configuration, block1).unwrap()
        } // TODO: don't unwrap
        (_, None) if config.header.number == 1 => 0,
        (_, None) => panic!(), // Bad `Config`.
    };

    // Determine the epoch number of the parent block. `None` if the parent is the genesis block.
    let parent_epoch_number = if config.parent_block_header.number != 0 {
        let parent_info =
            header_info::header_information(config.parent_block_header.clone()).unwrap();

        if slot_number <= parent_info.slot_number() {
            return Err(VerifyError::SlotNumberNotIncreasing);
        }

        Some(
            slot_number_to_epoch(
                parent_info.slot_number(),
                config.genesis_configuration,
                config.block1_slot_number.unwrap(),
            )
            .unwrap(),
        )
    } else {
        None
    };

    // Extract the epoch change information stored in the header, if any.
    let epoch_change = header.epoch_change.map(|(info, _)| EpochChangeInformation {
        info_epoch_number: epoch_number + 1,
        info,
    });

    // TODO: in case of epoch change, should also check the randomness value; while the runtime
    //       checks that the randomness value is correct, light clients in particular do not
    //       execute the runtime

    // Make sure that the expected epoch transitions correspond to what the blocks report.
    match (&epoch_change, Some(epoch_number) != parent_epoch_number) {
        (Some(_), true) => {}
        (None, false) => {}
        (Some(_), false) => return Err(VerifyError::UnexpectedEpochChangeLog),
        (None, true) => return Err(VerifyError::MissingEpochChangeLog),
    };

    // Intermediary object representing the state of the verification at this point.
    let pending = PendingVerify {
        header: config.header,
        seal_signature: header.seal_signature,
        epoch_change,
        epoch_number,
        slot_number,
        authority_index,
        primary_slot_claim: primary,
        vrf_output_and_proof: vrf,
    };

    // The information about epoch number 0 is never given by any block and is instead found in
    // the BABE genesis configuration.
    Ok(if epoch_number == 0 {
        SuccessOrPending::Success(
            pending.finish(&config.genesis_configuration.epoch0_configuration())?,
        )
    } else {
        SuccessOrPending::Pending(pending)
    })
}

/// Verification in progress. The block is **not** fully verified yet. You must call
/// [`PendingVerify::finish`] in order to finish the verification.
#[must_use]
pub enum SuccessOrPending<'a> {
    /// Need information about an epoch in order to finish verifying the block.
    Pending(PendingVerify<'a>),
    /// Block has been successfully verified.
    Success(VerifySuccess),
}

/// Verification in progress. The block is **not** fully verified yet. You must call
/// [`PendingVerify::finish`] in order to finish the verification.
#[must_use]
pub struct PendingVerify<'a> {
    /// Header of the block to verify.
    header: header::HeaderRef<'a>,
    /// Block signature contained in the header that we verify.
    seal_signature: &'a [u8],
    /// If `Some`, block is at an epoch transition.
    epoch_change: Option<EpochChangeInformation>,
    /// Epoch number the block belongs to.
    epoch_number: u64,
    /// Slot number the block belongs to.
    slot_number: u64,
    /// Index of the authority that has signed the block, according to the block header.
    authority_index: u32,
    /// If true, the slot claim is a primary slot. If false, a secondary slot.
    primary_slot_claim: bool,
    /// VRF output and proof contained in the block header. Cannot be `None` if
    /// `primary_slot_claim` is true.
    vrf_output_and_proof: Option<([u8; 32], [u8; 64])>,
}

impl<'a> PendingVerify<'a> {
    /// Returns the epoch number whose information must be passed to [`PendingVerify::finish`].
    pub fn epoch_number(&self) -> u64 {
        self.epoch_number
    }

    /// Finishes the verification. Must provide the information about the epoch whose number is
    /// obtained with [`PendingVerify::epoch_number`].
    pub fn finish(self, epoch_info: &EpochInformation) -> Result<VerifySuccess, VerifyError> {
        // TODO: check that slot type is allowed by BABE config

        // Fetch the authority that has supposedly signed the block.
        let signing_authority = epoch_info
            .authorities
            .get(
                usize::try_from(self.authority_index)
                    .map_err(|_| VerifyError::InvalidAuthorityIndex)?,
            )
            .ok_or(VerifyError::InvalidAuthorityIndex)?;

        // This `unwrap()` can only panic if `public_key` is the wrong length, which we know can't
        // happen as it's of type `[u8; 32]`.
        let signing_public_key =
            schnorrkel::PublicKey::from_bytes(&signing_authority.public_key).unwrap();

        // Now verifying the signature in the seal.
        {
            // The signature in the seal applies to the header from where the signature isn't present.
            // Build the hash that is expected to be signed.
            let pre_seal_hash = {
                let mut unsealed_header = self.header;
                let _popped = unsealed_header.digest.pop();
                debug_assert!(matches!(_popped, Some(header::DigestItemRef::Seal(_, _))));
                unsealed_header.hash()
            };

            let signature = schnorrkel::Signature::from_bytes(self.seal_signature)
                .map_err(|_| VerifyError::BadSignature)?;
            signing_public_key
                .verify_simple(b"substrate", &pre_seal_hash, &signature)
                .map_err(|_| VerifyError::BadSignature)?;
        }

        // Now verify the VRF.
        if let Some((vrf_output, vrf_proof)) = self.vrf_output_and_proof {
            // In order to verify the VRF output, we first need to create a transcript containing all
            // the data to verify the VRF against.
            let transcript = {
                let mut transcript = merlin::Transcript::new(&b"BABE"[..]);
                transcript.append_u64(b"slot number", self.slot_number);
                transcript.append_u64(b"current epoch", self.epoch_number);
                transcript.append_message(b"chain randomness", &epoch_info.randomness[..]);
                transcript
            };

            // These `unwrap()`s can only panic if `vrf_output` or `vrf_proof` are of the wrong
            // length, which we know can't happen as they're of types `[u8; 32]` and `[u8; 64]`.
            let vrf_output = schnorrkel::vrf::VRFOutput::from_bytes(&vrf_output[..]).unwrap();
            let vrf_proof = schnorrkel::vrf::VRFProof::from_bytes(&vrf_proof[..]).unwrap();

            let (vrf_in_out, _) = signing_public_key
                .vrf_verify(transcript, &vrf_output, &vrf_proof)
                .map_err(|_| VerifyError::BadVrfProof)?;

            // If this is a primary slot claim, we need to make sure that the VRF output is below
            // a certain threshold, otherwise all the authorities could claim all the slots.
            if self.primary_slot_claim {
                // TODO: not implemented
            }
        } else {
            debug_assert!(self.primary_slot_claim);
        }

        // Each slot can be claimed by one specific authority in what is called a secondary slot
        // claim. If the block is a secondary slot claim, we need to make sure that the author
        // is indeed the one that is expected.
        if !self.primary_slot_claim {
            // Expected author is determined based on `blake2_256(randomness | slot_number)`.
            let hash = {
                let mut hash = blake2_rfc::blake2b::Blake2b::new(32);
                hash.update(&epoch_info.randomness);
                hash.update(&self.slot_number.to_le_bytes());
                hash.finalize()
            };

            // The expected authority index is `hash % num_authorities`.
            let expected_authority_index = {
                let hash = primitive_types::U256::from_big_endian(hash.as_bytes());
                let authorities_len = primitive_types::U256::from(epoch_info.authorities.len());
                debug_assert!(!epoch_info.authorities.is_empty());
                hash % authorities_len
            };

            if expected_authority_index.as_u32() != self.authority_index {
                return Err(VerifyError::BadSecondarySlotAuthor);
            }
        }

        // Success! 🚀
        Ok(VerifySuccess {
            epoch_change: self.epoch_change,
            slot_number: self.slot_number,
        })
    }
}

/// Turns a slot number into an epoch number.
///
/// Returns an error if `slot_number` is inferior to `block1_slot_number`.
fn slot_number_to_epoch(
    slot_number: u64,
    genesis_config: &BabeGenesisConfiguration,
    block1_slot_number: u64,
) -> Result<u64, ()> {
    let slots_diff = slot_number.checked_sub(block1_slot_number).ok_or(())?;
    Ok(slots_diff / genesis_config.slots_per_epoch())
}

// TODO:

/*


/// Calculates the primary selection threshold for a given authority, taking
/// into account `c` (`1 - c` represents the probability of a slot being empty).
pub(super) fn calculate_primary_threshold(
    c: (u64, u64),
    authorities: &[(AuthorityId, BabeAuthorityWeight)],
    authority_index: usize,
) -> u128 {
    use num_bigint::BigUint;
    use num_rational::BigRational;
    use num_traits::{cast::ToPrimitive, identities::One};

    let c = c.0 as f64 / c.1 as f64;

    let theta =
        authorities[authority_index].1 as f64 /
        authorities.iter().map(|(_, weight)| weight).sum::<u64>() as f64;

    assert!(theta > 0.0, "authority with weight 0.");

    // NOTE: in the equation `p = 1 - (1 - c)^theta` the value of `p` is always
    // capped by `c`. For all pratical purposes `c` should always be set to a
    // value < 0.5, as such in the computations below we should never be near
    // edge cases like `0.999999`.

    let p = BigRational::from_float(1f64 - (1f64 - c).powf(theta)).expect(
        "returns None when the given value is not finite; \
         c is a configuration parameter defined in (0, 1]; \
         theta must be > 0 if the given authority's weight is > 0; \
         theta represents the validator's relative weight defined in (0, 1]; \
         powf will always return values in (0, 1] given both the \
         base and exponent are in that domain; \
         qed.",
    );

    let numer = p.numer().to_biguint().expect(
        "returns None when the given value is negative; \
         p is defined as `1 - n` where n is defined in (0, 1]; \
         p must be a value in [0, 1); \
         qed."
    );

    let denom = p.denom().to_biguint().expect(
        "returns None when the given value is negative; \
         p is defined as `1 - n` where n is defined in (0, 1]; \
         p must be a value in [0, 1); \
         qed."
    );

    ((BigUint::one() << 128) * numer / denom).to_u128().expect(
        "returns None if the underlying value cannot be represented with 128 bits; \
         we start with 2^128 which is one more than can be represented with 128 bits; \
         we multiple by p which is defined in [0, 1); \
         the result must be lower than 2^128 by at least one and thus representable with 128 bits; \
         qed.",
    )
}


*/

/*/// Returns true if the given VRF output is lower than the given threshold,
/// false otherwise.
pub(super) fn check_primary_threshold(inout: &VRFInOut, threshold: u128) -> bool {
    u128::from_le_bytes(inout.make_bytes::<[u8; 16]>(BABE_VRF_PREFIX)) < threshold
}*/
